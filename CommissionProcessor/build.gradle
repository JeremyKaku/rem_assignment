plugins {
// Build Java: https://docs.gradle.org/current/userguide/building_java_projects.html
    id 'java'
// https://docs.gradle.org/current/userguide/pmd_plugin.html#header
    id 'pmd'
// https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
}
group 'cs5010seaF24'
version '1.0'
repositories {
    mavenCentral()
}
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    implementation 'org.json:json:20231013'
    implementation 'org.apache.poi:poi:5.3.0'
    implementation 'org.apache.poi:poi-ooxml:5.3.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.2'
    implementation 'org.apache.commons:commons-text:1.12.0'
//    testImplementation 'org.mockito:mockito-core:5.14.2'
//    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
//    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
//    testImplementation 'org.mockito:mockito-core:3.12.4'
//    testImplementation 'junit:junit:4.13.2'
}
pmd {
    ignoreFailures=true
    pmdTest.enabled=false
    ruleSets = [
            "category/java/bestpractices.xml",
            "category/java/errorprone.xml",
            "category/java/codestyle.xml"
            //"java-basic",
            //"java-braces",
            //"java-strings",
    ]
}
javadoc {
    doLast {
        String fixedBuildDir = buildDir.toString().replace('\\', '/')
        println "file:///$fixedBuildDir/docs/javadoc/index.html"
    }
}
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir("${buildDir}/jacocoHtml")
}
jacocoTestReport {
    doLast {
        String fixedBuildDir = buildDir.toString().replace('\\', '/')
        println "file:///$fixedBuildDir/jacocoHtml/test/html/index.html"
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
// minimum percentage of code coverage
                minimum = 0.7
            }
        }
        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
// Fail the build if code coverage isn't high enough
check.dependsOn jacocoTestCoverageVerification
// Run code coverage after tests run
jacocoTestReport.mustRunAfter test

task doAll {
// Runs a java build. Imported from the java plugin
    dependsOn build
// Runs all the tests. Imported from the java plugin.
    dependsOn test
// Runs pmd. Imported by pmd plugin
    dependsOn check
// Runs java doc. Imported from the java plugin
    dependsOn javadoc
    println 'all done!'
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}